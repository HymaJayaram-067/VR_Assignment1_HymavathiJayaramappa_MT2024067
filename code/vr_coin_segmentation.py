# -*- coding: utf-8 -*-
"""VR_Coin_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t43CiiHL7U48cbX_Phh9pOUNGW-wfdsR
"""

# Mount The Google Drive
from google.colab import drive
drive.mount('/content/drive')

#import required packages i am importing opencv, numpy and matplotlib as they required here
import cv2
import numpy as np
import matplotlib.pyplot as plt

"""Indian Coins detection
using canny and region based segmentation
"""

# Loading  image
image_path = "/content/drive/MyDrive/Coin_segmentation_detection/coin4.jpg"
image = cv2.imread(image_path)
rgbimg = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
grayimg = cv2.cvtColor(rgbimg, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur to remove noise in the input image
gaussianimg = cv2.GaussianBlur(grayimg, (5, 5), sigmaX=0)

# Display Gaussian blurred image
plt.figure(figsize=(10, 5))
plt.subplot(1, 3, 1)
plt.imshow(gaussianimg, cmap='gray')
plt.title("Gaussian Blurred Image")
plt.axis('off')

#Canny Edge Detection
edges = cv2.Canny(gaussianimg, 100, 200)

# Display result of cann edge detection
plt.subplot(1, 3, 2)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edge")
plt.axis('off')

# Morphological closing to fill gaps
kernel = np.ones((3, 3), np.uint8)
closed_edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel, iterations=2)

# Display Morphologically closed edges
plt.subplot(1, 3, 3)
plt.imshow(closed_edges, cmap='gray')
plt.title("Morphological filled image")
plt.axis('off')
plt.show()

# Use HoughCircles to detect circles
circles = cv2.HoughCircles(closed_edges, cv2.HOUGH_GRADIENT, dp=1.2, minDist=30, param1=100, param2=30, minRadius=20, maxRadius=100)

# Draw detected circles
segmented_coins = []
if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        center = (i[0], i[1])
        radius = i[2]
        cv2.circle(image, center, radius, (255, 0, 0), 2)  # Draw circle
        cv2.circle(image, center, 2, (0, 255, 0), 3)  # Draw center

        # Extract coin region
        x, y, r = i[0], i[1], i[2]
        coin_cropped = rgbimg[y-r:y+r, x-r:x+r]
        segmented_coins.append(coin_cropped)

# Display final segmented image with circles
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Segmented Coins with Circles")
plt.axis("off")
plt.show()

# Display segmented coins
plt.figure(figsize=(15, 10))
for idx, coin in enumerate(segmented_coins):
    plt.subplot(1, len(segmented_coins), idx+1)
    plt.imshow(coin)
    plt.title(f'Coin {idx+1}')
    plt.axis('off')
plt.show()

#counting total number of coins

# Print total number of detected coins
print(f"Total number of detected coins: {len(segmented_coins)}")